package Compute;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;

class Solution {
	StreamTokenizer in = new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
	PrintWriter out = new PrintWriter(new OutputStreamWriter(System.out));
	int n, sum, tri[][] = new int[15][15], nums[] = { 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 };
	boolean book[] = new boolean[15];
	int ans[] = new int[15];

	public Solution() throws IOException {
		in.nextToken();
		n = (int) in.nval;
		in.nextToken();
		sum = (int) in.nval;
		tri[1][1] = 1;
		for (int i = 2; i <= n; i++) {
			for (int j = 1; j <= n; j++)
				tri[i][j] = tri[i - 1][j] + tri[i - 1][j - 1];
		}
		dfs(1, 0);
	}

	public void dfs(int step, int tempSum) {
		if (step > n) {
			if (tempSum == sum) {
				for (int i = 1; i <= n; i++)
					out.print(ans[i] + " ");
				out.flush();
				System.exit(0);
			}
			return;
		}
		if (tempSum >= sum)
			return;
		for (int i = 0; i < n; i++) {
			if (!book[i]) {
				book[i] = true;
				ans[step] = nums[i];
				dfs(step + 1, tempSum + nums[i] * tri[n][step]);
				book[i] = false;
			}
		}
	}
}

public class Main {
	public static void main(String[] args) throws IOException {
		Solution s = new Solution();
	}
}
