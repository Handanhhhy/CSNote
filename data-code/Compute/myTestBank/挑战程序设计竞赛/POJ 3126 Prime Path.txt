package Compute;

import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;

class Solution {
	boolean is_prime[] = new boolean[10000];
	boolean is_prime_small[] = new boolean[10000];
	int Num = 10000;

	public Solution() {
		for (int i = 0; i <= Math.sqrt(Num); i++)
			is_prime_small[i] = true;
		for (int i = 1000; i < Num; i++)
			is_prime[i] = true;
		for (int i = 2; i <= Math.sqrt(Num); i++) {
			if (is_prime_small[i]) {
				for (int j = 2 * i; j < Num; j += i)
					is_prime_small[j] = false;
				for (int j = Math.max(2, ((1000 + i - 1) / i)) * i; j < Num; j += i)
					is_prime[j] = false;
			}
		}
	}

	public int solve(int start, int end) {
		int dp[] = new int[Num];
		boolean book[] = new boolean[Num];
		for (int i = 0; i < Num; i++) {
			dp[i] = 0;
			book[i] = false;
		}
		Queue<Integer> queue = new LinkedList<Integer>();
		queue.offer(start);
		book[start] = true;// 标记自身
		while (!queue.isEmpty()) {
			int num = queue.poll();
			if (num == end)
				return dp[num];
			for (int i = 0; i < 4; i++) {
				for (int j = 0; j < 10; j++) {
					if (i == 3 && j == 0)
						continue;
					int temp = changeNum(num, i, j);
					if (is_prime[temp] && !book[temp]) {
						queue.offer(temp);
						dp[temp] = dp[num] + 1;
						book[temp] = true;
					}
				}

			}
		}
		return -1;
	}

	public int changeNum(int num, int i, int j) {
		switch (i) {
		case 0:
			return num / 10 * 10 + j;
		case 1:
			return num / 100 * 100 + j * 10 + num % 10;
		case 2:
			return num / 1000 * 1000 + j * 100 + num % 100;
		default:
			return j * 1000 + num % 1000;
		}
	}
}

public class Main {

	public static void main(String[] args) {
		Scanner in = new Scanner(System.in);
		Solution s = new Solution();
		int n = in.nextInt();
		for (int i = 0; i < n; i++) {
			int ans = s.solve(in.nextInt(), in.nextInt());
			if (ans != -1)
				System.out.println(ans);
			else
				System.out.println("Impossible");
		}
	}

}