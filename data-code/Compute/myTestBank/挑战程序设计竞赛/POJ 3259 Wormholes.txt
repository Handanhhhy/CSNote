import java.util.Arrays;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.Vector;

class edge {
	int to, cost;

	public edge(int t, int c) {
		to = t;
		cost = c;
	}
}

class Solution {
	Vector<Vector<edge>> es;
	int V;
	int[] d, num;
	final int INF = 999999;
	boolean book[];

	public boolean init(Vector<Vector<edge>> edges, int v) {
		es = edges;
		V = v;
		d = new int[v];
		num = new int[v];
		book = new boolean[v];
		return ford();
	}

	public boolean ford() {
		Arrays.fill(d, INF);
		Arrays.fill(num, 0);
		Arrays.fill(book, false);
		d[0] = 0;
		Queue<Integer> queue = new LinkedList<Integer>();
		queue.offer(0);
		book[0] = true;
		++num[0];
		while (!queue.isEmpty()) {
			int cur = queue.poll();
			for (edge e : es.get(cur)) {
				if (d[e.to] > d[cur] + e.cost) {
					d[e.to] = d[cur] + e.cost;
					if (!book[e.to]) {
						book[e.to] = true;
						queue.offer(e.to);
						if (++num[e.to] > V)
							return true;
					}
				}
			}
			book[cur] = false;
		}
		return false;
	}
}

public class Main {
	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		Solution solution = new Solution();
		int f = input.nextInt();
		while (f-- > 0) {
			int n = input.nextInt(), m = input.nextInt(), w = input.nextInt();
			Vector<Vector<edge>> es = new Vector<Vector<edge>>();
			for (int i = 0; i < n; i++)
				es.add(new Vector<edge>());
			for (int i = 0; i < m; i++) {// path双向
				int S = input.nextInt() - 1, E = input.nextInt() - 1, T = input.nextInt();
				es.get(S).add(new edge(E, T));
				es.get(E).add(new edge(S, T));
			}
			for (int i = 0; i < w; i++) {
				int S = input.nextInt() - 1, E = input.nextInt() - 1, T = input.nextInt();
				es.get(S).add(new edge(E, -T));
			}
			if (solution.init(es, n))
				System.out.println("YES");
			else
				System.out.println("NO");
		}
	}
}